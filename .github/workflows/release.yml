# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

# on:
#   release:
#     types: [published]

on:
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "README.md"
      - "LICENSE"

env: 
  STABLE_PYTHON_VER: 3.8

permissions:
  contents: read

jobs:
  build-and-pypi:
    name: Upload release to Pypi RepositorBuilds Docker Image for beta releasey
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.STABLE_PYTHON_VER }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - run: echo "Project built successfully"
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  # Create a job for getting tags and lowercase version info
  versioning:
    name: Get versioning info to export
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.version_number.outputs.prop }} 
      phase: ${{ steps.version_phase_lower.outputs.lowercase }} 

    steps:
      - name: Download source code
        uses: actions/checkout@v3
    
      - name: Get version number 
        id: version_number
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: './portainer_deployer/info.json'
          prop_path: 'version'
      
      - name: Get version phase (Capitalized)
        id: version_phase_cap
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: './portainer_deployer/info.json'
          prop_path: 'phase'

      - name: Get version phase (Lowercase)
        id: version_phase_lower
        uses: ASzc/change-string-case-action@v2
        with: 
          string: ${{steps.version_phase_cap.outputs.prop}}


  build-docker:
    name: Builds Docker Image for beta release
    env:
      IMAGE_NAME: ${{ github.event.repository.name }}
    runs-on: ubuntu-20.04
    strategy:
          matrix:
            python-version: [ '3.8', '3.9', '3.10' ]
    needs: [ versioning, upload-and-pypi ]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
  
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        if: ${{ matrix.python-version }} == ${{ env.STABLE_PYTHON_VER }}
        with:
          push: true
          tags: | 
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
      - name: Build and push with matrix
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:python${{ matrix.python-version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.versioning.outputs.version }}-python${{ matrix.python-version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-python${{ matrix.python-version }}
    